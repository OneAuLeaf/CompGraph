#version 330 core
layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 aTexCoord;
layout(location = 3) in vec3 aTangent;
layout(location = 4) in vec3 aBitangent;

out vec2 TexCoord;
out vec3 FragPos;
out mat3 TBN;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	gl_Position = projection * view * model * vec4(aPos, 1.0f);
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
	FragPos = vec3(model * vec4(aPos, 1.0f));
	
	vec3 T = normalize(vec3(model * vec4(aTangent, 0.0)));
	vec3 B = normalize(vec3(model * vec4(aBitangent, 0.0)));
	vec3 N = normalize(vec3(model * vec4(aNormal, 0.0)));
	TBN = mat3(T, B, N);
}

#version 330 core

out vec4 FragColor;

in vec2 TexCoord;
in vec3 FragPos;
in mat3 TBN;

struct Material
{
    sampler2D diffuse;
    sampler2D specular;
	sampler2D normal;
    float shininess;
};

struct Light {

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 viewPos;
uniform vec3 lightPos;

uniform Light light;
uniform Material material;

vec3 phong_light(vec3 normal, vec3 view_pos, vec3 light_pos, vec3 frag_pos)
{
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));

	vec3 direction = normalize(light_pos - frag_pos);
	float diffuse_strenght = max(dot(normal, direction), 0.0f);
	vec3 diffuse = diffuse_strenght * light.diffuse * vec3(texture(material.diffuse, TexCoord));

	vec3 refl_dir = reflect(-direction, normal);
	vec3 view_dir = normalize(view_pos - frag_pos);
	float specular_strenght = pow(max(dot(refl_dir, view_dir),0.0f), material.shininess);
	vec3 specular = specular_strenght * light.specular * vec3(texture(material.specular, TexCoord));

	return ambient + diffuse + specular;
}

void main()
{
	vec3 normal = texture(material.normal, TexCoord).rgb;
	normal = normalize(TBN * (normal * 2.0 - 1.0));
	vec3 light = phong_light(normal, viewPos, lightPos, FragPos);
	
	FragColor = vec4(light, 1.0);
}